<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace NLanguageTag
{
	public readonly partial struct LanguageTag
	{
		/// <summary>
		/// Creates language tag that consists of specified fields of this language tag
		/// </summary>
		public LanguageTag Take(Field fields)
		{
			if (fields == Field.All)
				return this;

			if (Language is null)
			{
				return fields.HasFlag(Field.PrivateUse)
					? new LanguageTag(PrivateUse)
					: new LanguageTag(null, null, null, default, default, default);
			}

			switch(fields)
			{
<#
foreach(var s in new bool[]{false, true})
foreach(var r in new bool[]{false, true})
foreach(var v in new bool[]{false, true})
foreach(var e in new bool[]{false, true})
foreach(var p in new bool[]{false, true})
{ #>
				case Field.Language<#
		if(s) {#> | Field.Script<# };
		if(r) {#> | Field.Region<# };
		if(v) {#> | Field.Variants<# };
		if(e) {#> | Field.Extensions<# };
		if(p) {#> | Field.PrivateUse<# } #>:
<# if (s && r && v && e && p) { #>
					throw new ApplicationException("This should never happen");
<# } else { #>
					return new LanguageTag(Language<#
		if(s) {#>, Script<# };
		if(r) {#>, Region<# };
		if(v) {#>, Variants<# };
		if(e) {#>, Extensions<# };
		if(p) {#>, PrivateUse<# } #>);
<# } } #>
				case Field.PrivateUse:
					return new LanguageTag(PrivateUse);
				default:
					return new LanguageTag();
			}
		}
	}
}
