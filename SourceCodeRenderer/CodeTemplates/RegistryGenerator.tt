<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\T4Tools\bin\NLanguageTag.T4Tools.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="NLanguageTag.T4Tools" #>
<#@ output extension=".statistic.txt" #>
<#
	var registry = Registry.ReadCurrent();
#>
<#@ include file="..\T4Templates\MultipleOutputHelper.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartNewFile("Language.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Language
	{
<#
var languageSelector = new PrefixTreeSelector("TryParse", "Language?",
	registry.PrimaryLanguages.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred() + "Cache.Instance"));
{
	var (minKey, maxKey) = registry.PrivateUsePrimaryLanguages.AsInterval();
	languageSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
}
#>

<#foreach(var line in languageSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Region.list.cs"); #>
using System;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Region
	{
<#foreach(var entry in registry.Regions.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{ #>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
<#if(entry.Deprecated != null)
  {
	  var obsoleteDescription = "";
	  if (entry.PreferredValue != null)
		  obsoleteDescription += $"use {entry.PreferredValue}, ";
	  if (entry.Comments != null)
		  obsoleteDescription += $"{entry.Comments}, ";#>
		[Obsolete("<#= obsoleteDescription #>deprecated from <#= entry.Deprecated #>")]
<# } #>
		public static Region <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Region Instance = new Region("<#= entry.Subtag #>",  RegionCode.<#= entry.CSharp_Name() #>, <#= entry.Deprecated != null ? "true" : "false" #>);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("RegionCode.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// Enum code of <see cref="Region"/> to use as constants in C#
	/// </summary>
	public enum RegionCode
	{
		/// <summary>
		/// For private use
		/// </summary>
		PrivateUse = 0,

<#
   foreach(var entry in registry.Regions.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
		/// <summary>
		/// code of <see cref="Region.<#= entry.CSharp_Name() #>"/>
		/// </summary>
<#if(entry.Deprecated != null)
  { #>
		[Obsolete("similarly Region.<#= entry.CSharp_Name() #>")]
<# } #>
		<#= entry.CSharp_Name() #> = <#= FixedNumbers.RegionCode.TryGet(entry.Subtag)?.ToString()??"#error code not found" #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<#
   if (registry.Regions.Count > FixedNumbers.RegionCode.Count)
   {
	   var newNumberCode = FixedNumbers.RegionCode.Count + 1;
	   manager.StartNewFile("RegionCode.newNumbers.csv");
	   foreach (var entry in registry.Regions.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	   {
		   if (FixedNumbers.RegionCode.TryGet(entry.Subtag) is null)
		   {
			   #>
<#= entry.Subtag #>,<#= newNumberCode #>
<#
			   newNumberCode++;
		   }
	   }
	   manager.EndBlock();
   }
#>
<# manager.StartNewFile("Region.byCode.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Region
	{
		/// <summary>
		/// Returns public Region by RegionCode
		/// </summary>
		public static Region ByCode(RegionCode code)
		{
			switch(code)
			{
<#
   foreach(var entry in registry.Regions.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
				case RegionCode.<#= entry.CSharp_Name() #>: return <#= entry.CSharp_Name() #>Cache.Instance;
<# } #>
				default: throw new ArgumentException(nameof(code), $"the code '{code}' does not correspond to the public region");
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Region.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Region
	{
<#
var regionSelector = new PrefixTreeSelector("TryParse", "Region?",
	registry.Regions.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred() + "Cache.Instance"));
    foreach (var region in registry.PrivateUseRegions)
    {
	    var (minKey, maxKey) = region.AsInterval();
	    if(minKey  is null)
		    regionSelector.Add(region.Subtag.ToLower(), $"forPrivateUse(\"{region.Subtag.ToLower()}\")");
		else
	        regionSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
    }
#>

<#foreach(var line in regionSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Script.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Script
	{
<#foreach(var entry in registry.Scripts.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{ #>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
		public static Script <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Script Instance = new Script("<#= entry.Subtag #>", ScriptCode.<#= entry.CSharp_Name() #>);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("ScriptCode.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// Enum code of <see cref="Script"/> to use as constants in C#
	/// </summary>
	public enum ScriptCode
	{
		/// <summary>
		/// For private use
		/// </summary>
		PrivateUse = 0,

<#
   foreach(var entry in registry.Scripts.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
		/// <summary>
		/// code of <see cref="Script.<#= entry.CSharp_Name() #>"/>
		/// </summary>
		<#= entry.CSharp_Name() #> = <#= FixedNumbers.ScriptCode.TryGet(entry.Subtag)?.ToString()??"#error code not found" #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<#
   if (registry.Scripts.Count > FixedNumbers.ScriptCode.Count)
   {
	   var newNumberCode = FixedNumbers.ScriptCode.Count + 1;
	   manager.StartNewFile("ScriptCode.newNumbers.csv");
	   foreach (var entry in registry.Scripts.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	   {
		   if (FixedNumbers.ScriptCode.TryGet(entry.Subtag) is null)
		   {
			   #>
<#= entry.Subtag #>,<#= newNumberCode #>
<#
			   newNumberCode++;
		   }
	   }
	   manager.EndBlock();
   }
#>
<# manager.StartNewFile("Script.byCode.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Script
	{
		/// <summary>
		/// Returns public Script by ScriptCode
		/// </summary>
		public static Script ByCode(ScriptCode code)
		{
			switch(code)
			{
<#
   foreach(var entry in registry.Scripts.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
				case ScriptCode.<#= entry.CSharp_Name() #>: return <#= entry.CSharp_Name() #>Cache.Instance;
<# } #>
				default: throw new ArgumentException(nameof(code), $"the code '{code}' does not correspond to the public script");
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Script.parsing.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public partial class Script
	{
<#
var scriptSelector = new PrefixTreeSelector("TryParse", "Script?",
	registry.Scripts.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.Subtag + "Cache.Instance"));
{
    var (minKey, maxKey) = registry.PrivateUseScripts.AsInterval();
    scriptSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
}
#>

<#foreach(var line in scriptSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Variant.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Variant
	{
<#foreach(var entry in registry.Variants.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{
	var tags = string.Join(", ", entry.Prefixes.Select(_ => "\"" + _ + "\""));

	#>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
<#if(entry.Deprecated != null)
{ #>
		[Obsolete("<#= entry.Comments #>, deprecated from <#= entry.Deprecated #>")]
<# } #>
		public static Variant <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Variant Instance = new Variant("<#= entry.Subtag #>", VariantCode.<#= entry.CSharp_Name() #>, new string[] { <#= tags #> }, <#= entry.Deprecated != null ? "true" : "false" #>);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("VariantCode.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// Enum code of <see cref="Variant"/> to use as constants in C#
	/// </summary>
	public enum VariantCode
	{
<#
   foreach(var entry in registry.Variants.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
		/// <summary>
		/// code of <see cref="Variant.<#= entry.CSharp_Name() #>"/>
		/// </summary>
		<#= entry.CSharp_Name() #> = <#= FixedNumbers.VariantCode.TryGet(entry.Subtag)?.ToString()??"#error code not found" #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<#
   if (registry.Variants.Count > FixedNumbers.VariantCode.Count)
   {
	   var newNumberCode = FixedNumbers.VariantCode.Count + 1;
	   manager.StartNewFile("VariantCode.newNumbers.csv");
	   foreach (var entry in registry.Variants.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	   {
		   if (FixedNumbers.VariantCode.TryGet(entry.Subtag) is null)
		   {
			   #>
<#= entry.Subtag #>,<#= newNumberCode #>
<#
			   newNumberCode++;
		   }
	   }
	   manager.EndBlock();
   }
#>
<# manager.StartNewFile("Variant.byCode.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Variant
	{
		/// <summary>
		/// Returns public Variant by VariantCode
		/// </summary>
		public static Variant ByCode(VariantCode code)
		{
			switch(code)
			{
<#
   foreach(var entry in registry.Variants.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{ #>
				case VariantCode.<#= entry.CSharp_Name() #>: return <#= entry.CSharp_Name() #>Cache.Instance;
<# } #>
				default: throw new ArgumentException(nameof(code), $"the code '{code}' does not correspond to the public variant");
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Variant.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Variant
	{
<#
var variantSelector = new PrefixTreeSelector("TryParse", "Variant?",
	registry.Variants.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred() + "Cache.Instance"));
#>

<#foreach(var line in variantSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# var types = new HashSet<string>(registry.AllEntries.Select(_ => _.Type)); #>
Total entries: <#= registry.AllEntries.Count() #>
Types:
<#foreach(var type in types)
{ #>
* <#= type #> - <#= registry.AllEntries.Count(_ => _.Type == type) #>
<# } #>
<# manager.Process(true); #>
