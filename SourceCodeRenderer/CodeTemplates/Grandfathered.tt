<#@ template language="C#" inherits="NLanguageTag.SourceCodeRenderer.RenderContext" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="NLanguageTag.SourceCodeRenderer" #>
<#@ import namespace="NLanguageTag.SourceCodeRenderer.SubtagRegistry" #>
<#@ output extension=".cs" #>
using System;

namespace NLanguageTag
{
	internal static class Grandfathered
	{
		internal static string? GetPreferredValue(string? text)
		{
			if (text is null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in Registry.Grandfathered.Where(_ => _.PreferredValue != null))
{ #>
				case "<#= entry.Tag.ToLower() #>": return "<#= entry.PreferredValue #>";
<# } #>
<#foreach(var entry in Registry.Grandfathered.Where(_ => _.PreferredValue is null))
{ #>
				case "<#= entry.Tag.ToLower() #>": throw new NotSupportedException($"Grandfathered code '{text}' not supported");
<# } #>
				case "zh-chs": return "zh-Hans";
				case "zh-cht": return "zh-Hant";
				default: return null;
			}
		}
	}
}
