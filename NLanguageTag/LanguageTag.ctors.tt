<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NLanguageTag
{
	public partial struct LanguageTag
	{
<#
foreach(var s in new bool[]{false, true})
foreach(var r in new bool[]{false, true})
foreach(var v in new bool[]{false, true})
foreach(var e in new bool[]{false, true})
foreach(var p in new bool[]{false, true})
{ #>

		/// <summary>
		/// Create the LanguageTag instance
		/// </summary>
		/// <param name="lang">primary language</param>
<# if(s) {
#>		/// <param name="script">script subtag</param>
<# }; if(r) {
#>		/// <param name="region">region subtag</param>
<# }; if(v) {
#>		/// <param name="variants">enumarate of variant subtags</param>
<# }; if(e) {
#>		/// <param name="extSubtags">enumarate of extensions subtags</param>
<# }; if(p) {
#>		/// <param name="privateUseSubtags">private use subtag</param>
<# } #>		public LanguageTag(Language lang<#
		if(s) {#>, Script? script<# }; 
		if(r) {#>, Region? region<# }; 
		if(v) {#>, IEnumerable<Variant> variants<# }; 
		if(e) {#>, IEnumerable<ExtensionSubtag> extSubtags<# }; 
		if(p) {#>, PrivateUseSubtags privateUseSubtags<# } #>)
			: this()
		{
			Language = lang;
<# if(s) {
#>			Script = script;
<# }; if(r) {
#>			Region = region;
<# }; if(v) {
#>			Variants = VariantCollection.Create(Language, Script, variants);
<# }; if(e) {
#>			Extensions = new ExtensionSubtagCollection(extSubtags);
<# }; if(p) {
#>			PrivateUse = privateUseSubtags;
<# } #>
		}
<# } #>

		public LanguageTag Take(Field fields)
		{
			if(!Language.HasValue)
			{
				if(fields.IsSet(Field.PrivateUse))
					return new LanguageTag(PrivateUse);
				else
					return new LanguageTag();
			}

			switch(fields)
			{
<#
foreach(var s in new bool[]{false, true})
foreach(var r in new bool[]{false, true})
foreach(var v in new bool[]{false, true})
foreach(var e in new bool[]{false, true})
foreach(var p in new bool[]{false, true})
{ #>
				case Field.Language<#
		if(s) {#>| Field.Script<# }; 
		if(r) {#>| Field.Region<# }; 
		if(v) {#>| Field.Variants<# }; 
		if(e) {#>| Field.Extensions<# }; 
		if(p) {#>| Field.PrivateUse<# } #>:
					return new LanguageTag(Language.Value<#
		if(s) {#>, Script<# }; 
		if(r) {#>, Region<# }; 
		if(v) {#>, Variants<# }; 
		if(e) {#>, Extensions<# }; 
		if(p) {#>, PrivateUse<# } #>);
<# } #>
				case Field.PrivateUse:
					return new LanguageTag(PrivateUse);
				default:
					return new LanguageTag();
			}
		}
	}
}