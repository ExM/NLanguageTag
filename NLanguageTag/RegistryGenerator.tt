<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".statistic.txt" #>
<#@ include file="..\T4Templates\Registry.ttinclude" #>
<#@ include file="..\T4Templates\MultipleOutputHelper.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# manager.StartNewFile("ExtLanguageExtensions.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	/// <summary>
	/// Мethods for the components of language tag
	/// </summary>
	public static partial class LanguageTagExtensions
	{
		/// <summary>
		/// Determines the possible presence of extlang subtag
		/// </summary>
		/// <param name="language">primary language subtag</param>
		public static bool ExtLanguageAvailable(this Language language)
		{
			switch(language)
			{
<#foreach(var code in extlangs.Select(_ => _.Prefix.First().ToUpper()).Distinct())
{ #>
				case Language.<#= code #>:
<# } #>
					return true;
				default:
					return false;
			}
		}

		/// <summary>
		/// specifies the language that must precede the extlang subtag
		/// </summary>
		/// <param name="language">primary language subtag</param>
		public static Language? GetPrefix(this Language language)
		{
			switch(language)
			{
<#foreach(var entry in extlangs)
{ if(entry.PreferredValue != null) {#>
				case Language.<#= entry.PreferredValue.ToUpper() #>: return Language.<#= entry.Prefix.First().ToUpper() #>;
<#} } #>
				default:
					return null;
			}
		}

		/// <summary>
		/// Determines the proper language subtag that should be used instead of given combination of
		/// language subtag and extlang subtag
		/// </summary>
		/// <param name="text">text that can possibly be extlang subtag</param>
		/// <param name="prefix">the main language subtag</param>
		public static Language? TryParseFromExtLanguage(this string text, Language prefix)
		{
			if(text == null)
				return null;

			switch(prefix)
			{
<#foreach(var lang in extlangs.Select(_ => _.Prefix.First()).Distinct())
{ #>
				case Language.<#= lang.ToUpper() #>:
					switch (text.ToLowerInvariant())
					{
<#foreach(var entry in extlangs.Where(_ => _.Prefix.First() == lang && _.PreferredValue != null))
{ #>
						case "<#= entry.Subtag.ToLower()#>": return Language.<#= entry.PreferredValue.ToUpper() #>;
<# } #>
						default: return null;
					}
<# } #>
				default:
					return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Grandfathered.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	internal static class Grandfathered
	{
		internal static string GetPreferredValue(string text)
		{
			if (text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in grandfathered.Where(_ => _.PreferredValue != null))
{ #>
				case "<#= entry.Tag.ToLower() #>": return "<#= entry.PreferredValue #>";
<# } #>
<#foreach(var entry in grandfathered.Where(_ => _.PreferredValue == null))
{ #>
				case "<#= entry.Tag.ToLower() #>": throw new NotSupportedException("grandfathered code '" + text + "' not supported");
<# } #>
				case "zh-chs": return "zh-Hans";
				case "zh-cht": return "zh-Hant";
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Language.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// The primary language subtag is the first subtag in a language tag.
	/// </summary>
	public enum Language
	{
<#foreach(var entry in prlangs.Where(_ => _.PreferredValue == null))
{ #>
		/// <summary>
		/// <#= entry.Description #>
<#if(entry.Comments != null)
{ #>		/// <#= entry.Comments #>
<# } #>
		/// </summary>
		<#= entry.Subtag.ToUpper() #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("LanguageExtensions.generated.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public static partial class LanguageTagExtensions
	{
		/// <summary>
		/// Returns macrolanguage for the given specific language
		/// </summary>
		public static Language? GetMacrolanguage(this Language language)
		{
			switch(language)
			{
<#foreach(var entry in prlangs.Where(_ => _.PreferredValue == null && _.Macrolanguage != null))
{ #>
				case Language.<#= entry.Subtag.ToUpper() #>: return Language.<#= entry.Macrolanguage.ToUpper() #>;
<# } #>
				default: return null;
			}
		}

		/// <summary>
		/// Returns the scope of the given language subtag (on null if the subtag represents an invididual language)
		/// </summary>
		public static LanguageScope? GetScope(this Language language)
		{
			switch(language)
			{
<#foreach(var entry in prlangs.Where(_ => _.Scope != null))
{
	var code = char.ToUpper(entry.Scope[0]) + entry.Scope.Substring(1);
#>
				case Language.<#= entry.Subtag.ToUpper() #>: return LanguageScope.<#= code #>;
<# } #>
				default: return null;
			}
		}

		/// <summary>
		/// Returns script (if such exists) used to write the overwhelming majority of documents for the
		/// given language. The subtag for such a script therefore adds no distinguishing information to
		/// a language tag and thus SHOULD NOT be used for most documents in that language.
		/// </summary>
		public static Script? GetSuppressScript(this Language language)
		{
			switch(language)
			{
<#foreach(var entry in prlangs.Where(_ => _.PreferredValue == null && _.SuppressScript != null))
{ #>
				case Language.<#= entry.Subtag.ToUpper() #>: return Script.<#= entry.SuppressScript #>;
<# } #>
				default: return null;
			}
		}

		/// <summary>
		/// Converts the value to its equivalent string representation.
		/// </summary>
		public static string ToText(this Language v)
		{
			switch (v)
			{
<#foreach(var entry in prlangs.Where(_ => _.PreferredValue == null))
{ #>
				case Language.<#= entry.Subtag.ToUpper() #>: return "<#= entry.Subtag #>";
<# } #>
				default:
					throw new NotImplementedException("unexpected language '" + v + "'");
			}
		}

		/// <summary>
		/// Parses language subtag from its string representation, returns null if parsing was not successful
		/// </summary>
		public static Language? TryParseLanguage(this string text)
		{
			if(text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in prlangs)
{ #>
				case "<#= entry.Subtag.ToLower()#>": return Language.<#= (entry.PreferredValue??entry.Subtag).ToUpper() #>;
<# } #>
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Region.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// Region subtags are used to indicate linguistic variations associated
	/// with or appropriate to a specific country, territory, or region.
	/// </summary>
	public enum Region
	{
<#foreach(var entry in regions.Where(_ => _.PreferredValue == null))
{ #>
		/// <summary>
		/// <#= entry.Description #>
<#if(entry.Comments != null)
{ #>		/// <#= entry.Comments #>
<# } #>
		/// </summary>
		<#= entry.AsRegionCode #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("RegionExtensions.generated.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public static partial class LanguageTagExtensions
	{
		/// <summary>
		/// Converts the value to its equivalent string representation.
		/// </summary>
		public static string ToText(this Region v)
		{
			switch (v)
			{
<#foreach(var entry in regions.Where(_ => _.PreferredValue == null))
{ #>
				case Region.<#= entry.AsRegionCode #>: return "<#= entry.Subtag #>";
<# } #>
				default:
					throw new NotImplementedException("unexpected value '" + v + "'");
			}
		}

		/// <summary>
		/// Parses region subtag from its string representation, returns null if parsing was not successful
		/// </summary>
		public static Region? TryParseRegion(this string text)
		{
			if(text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in regions)
{ #>
				case "<#= entry.Subtag.ToLower()#>": return Region.<#= entry.PreferredValue??entry.AsRegionCode #>;
<# } #>
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Script.cs"); #>
using System;

namespace NLanguageTag
{
	/// <summary>
	/// Script subtags are used to indicate the script or writing system variations
	/// that distinguish the written forms of a language or its dialects
	/// </summary>
	public enum Script
	{
<#foreach(var entry in scripts)
{ #>
		/// <summary>
		/// <#= entry.Description #>
<#if(entry.Comments != null)
{ #>		/// <#= entry.Comments #>
<# } #>
		/// </summary>
		<#= entry.Subtag #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("ScriptExtensions.generated.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public static partial class LanguageTagExtensions
	{

		/// <summary>
		/// Converts the value to its equivalent string representation.
		/// </summary>
		public static string ToText(this Script v)
		{
			switch (v)
			{
<#foreach(var entry in scripts)
{ #>
				case Script.<#= entry.Subtag #>: return "<#= entry.Subtag#>";
<# } #>
				default:
					throw new NotImplementedException("unexpected value: " + v);
			}
		}

		/// <summary>
		/// Parses script subtag from its string representation, returns null if parsing was not successful
		/// </summary>
		public static Script? TryParseScript(this string text)
		{
			if(text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in scripts)
{ #>
				case "<#= entry.Subtag.ToLower()#>": return Script.<#= entry.Subtag#>;
<# } #>
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Variant.cs"); #>
namespace NLanguageTag
{
	/// <summary>
	/// Variant subtags are used to indicate additional, well-recognized variations that define a
	/// language or its dialects that are not covered by other available subtags.
	/// </summary>
	public enum Variant
	{
<#foreach(var entry in variants.Where(_ => _.PreferredValue == null).OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{#>
		/// <summary>
		/// <#= entry.Description #>
<#if(entry.Comments != null)
{ #>		/// <#= entry.Comments #>
<# } #>
		/// </summary>
		<#= CodeStyle.ToVariantCode(entry.Subtag) #>,

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("VariantExtensions.generated.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public static partial class LanguageTagExtensions
	{
		internal static string[] GetTextPrefixes(this Variant v)
		{
			switch(v)
			{
<#foreach(var entry in variants.Where(_ => _.PreferredValue == null))
{
	var tags = string.Join(", ", entry.Prefix.Select(_ => "\"" + _ + "\"")); #>
				case Variant.<#= CodeStyle.ToVariantCode(entry.Subtag) #>: return new string[] { <#= tags #> };
<# } #>
				default:
					throw new NotImplementedException("unexpected value: " + v);
			}
		}

		/// <summary>
		/// Converts the value to its equivalent string representation.
		/// </summary>
		public static string ToText(this Variant v)
		{
			switch (v)
			{
<#foreach(var entry in variants.Where(_ => _.PreferredValue == null))
{ #>
				case Variant.<#= CodeStyle.ToVariantCode(entry.Subtag) #>: return "<#= entry.Subtag #>";
<# } #>
				default:
					throw new NotImplementedException("unexpected value: " + v);
			}
		}

		/// <summary>
		/// Parses variant subtag from its string representation, returns null if parsing was not successful
		/// </summary>
		public static Variant? TryParseVariant(this string text)
		{
			if(text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in variants)
{ #>
				case "<#= entry.Subtag.ToLower()#>": return Variant.<#= CodeStyle.ToVariantCode(entry.PreferredValue??entry.Subtag) #>;
<# } #>
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# var types = new HashSet<string>(entries.Select(_ => _.Type)); #>
Total entries: <#= entries.Count() #>
Types:
<#foreach(var type in types)
{ #>
* <#= type #> - <#= entries.Count(_ => _.Type == type) #>
	use fields: <#= string.Join(", ", new HashSet<string>(entries.Where(_ => _.Type == type).SelectMany(_ => _.UsedFields))) #>
<# } #>
<# manager.Process(true); #>
