<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\T4Tools\bin\NLanguageTag.T4Tools.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="NLanguageTag.T4Tools" #>
<#@ output extension=".statistic.txt" #>
<#
	var registry = Registry.ReadCurrent();
#>
<#@ include file="..\T4Templates\MultipleOutputHelper.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# manager.StartNewFile("Language.extLang.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Language
	{
<#foreach(var lang in registry.ExtLanguages.Select(_ => _.Prefix).Distinct())
{
	var extLangSelector = new PrefixTreeSelector("tryParseFromExtLanguage_" + lang.ToUpperInvariant(), "Language?",
	registry.ExtLanguages.Where(_ => _.Prefix == lang && _.PreferredValue != null).ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => "Language." + _.PreferredValue.ToUpperInvariant()));
#>

<#foreach(var line in extLangSelector.Render())
{ #>
		<#= line #>
<# } #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Grandfathered.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	internal static class Grandfathered
	{
		internal static string? GetPreferredValue(string? text)
		{
			if (text == null)
				return null;

			switch (text.ToLowerInvariant())
			{
<#foreach(var entry in registry.Grandfathered.Where(_ => _.PreferredValue != null))
{ #>
				case "<#= entry.Tag.ToLower() #>": return "<#= entry.PreferredValue #>";
<# } #>
<#foreach(var entry in registry.Grandfathered.Where(_ => _.PreferredValue == null))
{ #>
				case "<#= entry.Tag.ToLower() #>": throw new NotSupportedException("grandfathered code '" + text + "' not supported");
<# } #>
				case "zh-chs": return "zh-Hans";
				case "zh-cht": return "zh-Hant";
				default: return null;
			}
		}
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Language.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Language
	{
<#
	var isPrefix = new HashSet<string>(registry.ExtLanguages.Select(_ => _.Prefix.ToUpperInvariant()).Distinct());
	var prefixMap = registry.ExtLanguages.Where(_ => _.PreferredValue != null)
		  .ToDictionary(_ => _.PreferredValue.ToUpperInvariant(), _ => _.Prefix.ToUpperInvariant());

	foreach(var entry in registry.PrimaryLanguages.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
	{
	    var suppressScriptArg = entry.SuppressScript == null ? "null" : $"Script.{entry.SuppressScript}";
	    var macrolanguageArg = entry.Macrolanguage == null ? "null" : $"Language.{entry.CSharp_Macrolanguage()}";
	    var scopeArg = entry.Scope == null ? "null" : $"LanguageScope.{entry.CSharp_LanguageScope()}";
	    var extLanguageParserArg = isPrefix.Contains(entry.CSharp_Name())
		    ? $"tryParseFromExtLanguage_{entry.CSharp_Name()}"
		    : "null";
	    var prefixArg = prefixMap.TryGetValue(entry.CSharp_Name(), out var prefix)
		         ? $"Language.{prefix}"
		         : "null";
	    #>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
<#if(entry.Deprecated != null)
  {
	  var obsoleteDescription = "";
	  if (entry.PreferredValue != null)
		  obsoleteDescription += $"use {entry.PreferredValue}, ";
	  if (entry.Comments != null)
		  obsoleteDescription += $"{entry.Comments}, ";#>
		[Obsolete("<#= obsoleteDescription #>deprecated from <#= entry.Deprecated #>")]
<# } #>
		public static Language <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Language Instance = new Language(
                "<#= entry.Subtag #>",
                <#= suppressScriptArg #>,
                <#= macrolanguageArg #>,
                <#= scopeArg #>,
                <#= extLanguageParserArg #>,
                <#= prefixArg #>,
                <#= entry.Deprecated != null ? "true" : "false" #>,
                false);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Language.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Language
	{
<#
var languageSelector = new PrefixTreeSelector("TryParse", "Language?",
	registry.PrimaryLanguages.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred()));
{
	var (minKey, maxKey) = registry.PrivateUsePrimaryLanguages.AsInterval();
	languageSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
}
#>

<#foreach(var line in languageSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Region.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Region
	{
<#foreach(var entry in registry.Regions.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{ #>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
<#if(entry.Deprecated != null)
  {
	  var obsoleteDescription = "";
	  if (entry.PreferredValue != null)
		  obsoleteDescription += $"use {entry.PreferredValue}, ";
	  if (entry.Comments != null)
		  obsoleteDescription += $"{entry.Comments}, ";#>
		[Obsolete("<#= obsoleteDescription #>deprecated from <#= entry.Deprecated #>")]
<# } #>
		public static Region <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Region Instance = new Region("<#= entry.Subtag #>", <#= entry.Deprecated != null ? "true" : "false" #>, false);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Region.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Region
	{
<#
var regionSelector = new PrefixTreeSelector("TryParse", "Region?",
	registry.Regions.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred()));
    foreach (var region in registry.PrivateUseRegions)
    {
	    var (minKey, maxKey) = region.AsInterval();
	    if(minKey  == null)
		    regionSelector.Add(region.Subtag.ToLower(), $"forPrivateUse(\"{region.Subtag.ToLower()}\")");
		else
	        regionSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
    }
#>

<#foreach(var line in regionSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Script.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Script
	{
<#foreach(var entry in registry.Scripts.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{ #>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
		public static Script <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Script Instance = new Script("<#= entry.Subtag #>", false);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Script.parsing.cs"); #>
using System;
using System.Globalization;

namespace NLanguageTag
{
	public partial class Script
	{
<#
var scriptSelector = new PrefixTreeSelector("TryParse", "Script?",
	registry.Scripts.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.Subtag));
{
    var (minKey, maxKey) = registry.PrivateUseScripts.AsInterval();
    scriptSelector.AddInterval(minKey.ToLowerInvariant(), maxKey.ToLowerInvariant(), "forPrivateUse(span.AsText())");
}
#>

<#foreach(var line in scriptSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Variant.list.cs"); #>
using System;

namespace NLanguageTag
{
	public partial class Variant
	{
<#foreach(var entry in registry.Variants.OrderBy(_ => _.Subtag, StringComparer.OrdinalIgnoreCase))
{
	var tags = string.Join(", ", entry.Prefixes.Select(_ => "\"" + _ + "\""));

	#>
		/// <summary>
<#foreach(var summaryLine in entry.CSharp_Summary())
{ #>
		/// <#= summaryLine #>
<# } #>
		/// </summary>
<#if(entry.Deprecated != null)
{ #>
		[Obsolete("<#= entry.Comments #>, deprecated from <#= entry.Deprecated #>")]
<# } #>
		public static Variant <#= entry.CSharp_Name() #> => <#= entry.CSharp_Name() #>Cache.Instance;

		private static class <#= entry.CSharp_Name() #>Cache
		{
			public static readonly Variant Instance = new Variant("<#= entry.Subtag #>", new string[] { <#= tags #> }, <#= entry.Deprecated != null ? "true" : "false" #>);
		}

<# } #>
	}
}
<# manager.EndBlock(); #>
<# manager.StartNewFile("Variant.parsing.cs"); #>
using System;
using System.Globalization;

#pragma warning disable 618
namespace NLanguageTag
{
	public partial class Variant
	{
<#
var variantSelector = new PrefixTreeSelector("TryParse", "Variant?",
	registry.Variants.ToDictionary(
		_ => _.Subtag.ToLower(),
		_ => _.CSharp_Preferred()));
#>

<#foreach(var line in variantSelector.Render())
{ #>
		<#= line #>
<# } #>
	}
}
<# manager.EndBlock(); #>
<# var types = new HashSet<string>(registry.AllEntries.Select(_ => _.Type)); #>
Total entries: <#= registry.AllEntries.Count() #>
Types:
<#foreach(var type in types)
{ #>
* <#= type #> - <#= registry.AllEntries.Count(_ => _.Type == type) #>
<# } #>
<# manager.Process(true); #>
