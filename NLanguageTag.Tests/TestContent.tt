<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\T4Templates\Registry.ttinclude" #>
<#@ include file="..\T4Templates\MultipleOutputHelper.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# var resources = new []
{
	new { Name = "Languages", Lines = prlangs.Select(_ => _.Subtag) },
	new { Name = "Grandfathered", Lines = grandfathered.Where(_ => _.PreferredValue != null).Select(_ => _.Tag) },
	new { Name = "GrandfatheredNotSupported", Lines = grandfathered.Where(_ => _.PreferredValue == null).Select(_ => _.Tag) },
	new { Name = "Regions", Lines = regions.Select(_ => _.Subtag) },
	new { Name = "Scripts", Lines = scripts.Select(_ => _.Subtag) },
	new { Name = "Variants", Lines = variants.Select(_ => _.Subtag) },
	new { Name = "ExtLanguages", Lines = extlangs.Where(_ => _.PreferredValue != null).Select(_ => _.Prefix.First() + "-" + _.Subtag) },

}; #>
using System;
using System.IO;
using System.Collections.Generic;
using System.Globalization;

namespace NLanguageTag.Tests
{
	public static class TestContent
	{
<# foreach(var resource in resources) { #>
		public static IEnumerable<string> Get<#= resource.Name #>()
		{
			var assembly = typeof(TestContent).Assembly;
			var resourceName = "NLanguageTag.Tests.<#= resource.Name #>.txt";

			using (Stream stream = assembly.GetManifestResourceStream(resourceName))
			using (StreamReader reader = new StreamReader(stream))
			{
				while(true)
				{
					var line = reader.ReadLine();
					if(string.IsNullOrEmpty(line))
						yield break;
					else
						yield return line;
				}
			}
		}
<# manager.StartNewFile(resource.Name + ".txt"); #>
<# foreach(var line in resource.Lines) { #>
<#= line #>
<# } #>
<# manager.EndBlock(); #>

<# } #>
	}
}
<# manager.Process(true); #>
